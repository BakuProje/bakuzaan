const videoElement = document.getElementById('background-video');
const videoSources = [
    './isi/video/infobot.mp4',
    './isi/video/video3.mp4',
    './isi/video/video4.mp4',
    './isi/video/video5.mp4'
];

let currentVideoIndex = 0;

function playNextVideo() {
    videoElement.src = videoSources[currentVideoIndex];
    videoElement.load();
    videoElement.play().catch(error => {
        console.log("Auto-play prevented:", error);
    });
    
    currentVideoIndex = (currentVideoIndex + 1) % videoSources.length;
}

playNextVideo();

videoElement.addEventListener('ended', playNextVideo);

function adjustVideoSize() {
    const videoAspect = videoElement.videoWidth / videoElement.videoHeight;
    const windowAspect = window.innerWidth / window.innerHeight;
    
    if (windowAspect > videoAspect) {

        videoElement.style.width = "100vw";
        videoElement.style.height = "auto";
    } else {

        videoElement.style.width = "auto";
        videoElement.style.height = "100vh";
    }
}

videoElement.addEventListener('loadedmetadata', adjustVideoSize);

window.addEventListener('resize', adjustVideoSize);

const audioToggle = document.getElementById('audio-toggle');
const audioIcon = audioToggle.querySelector('i');

audioToggle.addEventListener('click', function() {
    if (videoElement.muted) {
        videoElement.muted = false;
        audioIcon.classList.remove('fa-volume-mute');
        audioIcon.classList.add('fa-volume-up');
    } else {
        videoElement.muted = true;
        audioIcon.classList.remove('fa-volume-up');
        audioIcon.classList.add('fa-volume-mute');
    }
});

function toggleWaPopup() {
    const popup = document.getElementById('wa-popup');
    popup.classList.add('active');
}


function toggleTiktokPopup() {
    const popup = document.getElementById('tiktok-popup');
    popup.classList.add('active');
}


function closePopup(popupId) {
    const popup = document.getElementById(popupId);
    popup.classList.remove('active');
}

document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('.link, .contact-item, .audio-control, .social-icon');
    
    buttons.forEach(button => {
        button.addEventListener('click', function(e) {
            const x = e.clientX - e.target.getBoundingClientRect().left;
            const y = e.clientY - e.target.getBoundingClientRect().top;
            
            const ripple = document.createElement('span');
            ripple.classList.add('ripple');
            ripple.style.left = `${x}px`;
            ripple.style.top = `${y}px`;
            
            this.appendChild(ripple);
            
            setTimeout(() => {
                ripple.remove();
            }, 600);
        });
    });
});

window.onclick = function(event) {
    if (event.target.classList.contains('popup-overlay')) {
        event.target.classList.remove('active');
    }
}

window.addEventListener('load', function() {
    
    setTimeout(() => {
        const loader = document.getElementById('loader');
        loader.style.opacity = '0';
        setTimeout(() => {
            loader.style.display = 'none';
        }, 800);
    }, 2500);

    createShootingStars();
});


function createShootingStars() {
    const container = document.getElementById('shootingStars');
    const starCount = 15;
    
    for (let i = 0; i < starCount; i++) {
        const star = document.createElement('div');
        star.classList.add('shooting-star');
        

        const delay = Math.random() * 15;
        const duration = Math.random() * 10 + 5;
        const top = Math.random() * 50;
        
        star.style.top = `${top}%`;
        star.style.left = `-100px`;
        star.style.animationDelay = `${delay}s`;
        star.style.animationDuration = `${duration}s`;
        
        container.appendChild(star);
    }
}

VanillaTilt.init(document.querySelectorAll(".link"), {
    max: 15,
    speed: 400,
    glare: true,
    "max-glare": 0.3,
    scale: 1.05,
    perspective: 1000,
    transition: true,
    gyroscope: true,
    easing: "cubic-bezier(.03,.98,.52,.99)"
});

document.addEventListener('DOMContentLoaded', function() {
    particlesJS('particles-js', {
        "particles": {
            "number": {
                "value": 80,
                "density": {
                    "enable": true,
                    "value_area": 800
                }
            },
            "color": {
                "value": "#ffffff"
            },
            "shape": {
                "type": "circle",
                "stroke": {
                    "width": 0,
                    "color": "#000000"
                },
                "polygon": {
                    "nb_sides": 5
                }
            },
            "opacity": {
                "value": 0.3,
                "random": true,
                "anim": {
                    "enable": false,
                    "speed": 1,
                    "opacity_min": 0.1,
                    "sync": false
                }
            },
            "size": {
                "value": 3,
                "random": true,
                "anim": {
                    "enable": false,
                    "speed": 40,
                    "size_min": 0.1,
                    "sync": false
                }
            },
            "line_linked": {
                "enable": true,
                "distance": 150,
                "color": "#ffffff",
                "opacity": 0.2,
                "width": 1
            },
            "move": {
                "enable": true,
                "speed": 2,
                "direction": "none",
                "random": false,
                "straight": false,
                "out_mode": "out",
                "bounce": false,
                "attract": {
                    "enable": false,
                    "rotateX": 600,
                    "rotateY": 1200
                }
            }
        },
        "interactivity": {
            "detect_on": "canvas",
            "events": {
                "onhover": {
                    "enable": true,
                    "mode": "grab"
                },
                "onclick": {
                    "enable": true,
                    "mode": "push"
                },
                "resize": true
            },
            "modes": {
                "grab": {
                    "distance": 140,
                    "line_linked": {
                        "opacity": 0.5
                    }
                },
                "push": {
                    "particles_nb": 4
                }
            }
        },
        "retina_detect": true
    });
});

document.querySelectorAll('.link').forEach(link => {
    link.addEventListener('click', function(e) {

        confetti({
            particleCount: 100,
            spread: 70,
            origin: { y: e.clientY / window.innerHeight, x: e.clientX / window.innerWidth }
        });
    });
});

const themeToggle = document.getElementById('theme-toggle');
const themeIcon = themeToggle.querySelector('i');

themeToggle.addEventListener('click', function() {
    if (document.body.classList.contains('light-theme')) {
        document.body.classList.remove('light-theme');
        themeIcon.classList.remove('fa-moon');
        themeIcon.classList.add('fa-sun');
    } else {
        document.body.classList.add('light-theme');
        themeIcon.classList.remove('fa-sun');
        themeIcon.classList.add('fa-moon');
    }
});


document.addEventListener('DOMContentLoaded', function() {
    AOS.init({
        once: true,
        disable: 'mobile'
    });
});

const chatbotIcon = document.getElementById('chatbotIcon');
const chatbotContainer = document.getElementById('chatbotContainer');
const closeChat = document.getElementById('closeChat');
const chatMessages = document.getElementById('chatMessages');
const chatInput = document.getElementById('chatInput');
const sendMessage = document.getElementById('sendMessage');

chatbotIcon.addEventListener('click', function() {
    chatbotContainer.classList.add('open');
    chatbotIcon.style.display = 'none';
});

closeChat.addEventListener('click', function() {
    chatbotContainer.classList.remove('open');
    setTimeout(() => {
        chatbotIcon.style.display = 'flex';
    }, 300);
});


const botResponses = {
    'hai': 'Hai juga! 👋 Ada yang bisa saya bantu?',
    'halo': 'Halo! 👋 Selamat datang di Vonix PS!',
    'cara bermain': 'Cara bermain Vonix PS:\n\n📱 UNTUK ANDROID:\n1. Klik tombol "VHOST & HOSTGO" di halaman utama\n2. Klik "copy powertunnel" \n3. Buka aplikasi Power Tunnel\n4. Masuk ke menu Plugins\n5. Pilih pengaturan bagian Host\n6. Paste URL yang sudah di-copy tadi\n\n💻 UNTUK PC/LAPTOP:\n1. Buka Notepad (klik kanan → Run as administrator)\n2. Klik File → Open\n3. Ketik alamat: C:\\Windows\\System32\\drivers\\etc\n4. Ubah filter file menjadi "All Files"\n5. Pilih file "hosts"\n6. Tambahkan baris berikut di bagian paling bawah:\n\n15.235.166.218 growtopia1.com\n15.235.166.218 growtopia2.com\n15.235.166.218 www.growtopia1.com\n15.235.166.218 www.growtopia2.com\n15.235.166.218 RvLnd.here',
    'apa itu vonix': 'Vonix PS adalah private server Growtopia yang menyediakan gameplay seru dan komunitas yang ramah!',
    'admin': 'Admin kami adalah Kuzu dan Dhill. Kamu bisa menghubungi mereka melalui WhatsApp atau Discord.',
    'cara download': 'Klik tombol VHOST & HOSTGO atau POWER TUNNEL di halaman utama untuk mulai mendownload.',
    'terima kasih': 'Sama-sama! 😊 Senang bisa membantu.',
    'terimakasih': 'Sama-sama! 😊 Senang bisa membantu.',
    'makasih': 'Sama-sama! 😊 Senang bisa membantu.',
    'fitur': 'Vonix PS memiliki banyak fitur menarik, seperti:\n\n✅ Item gratis untuk pemain baru\n✅ Event mingguan dengan hadiah menarik\n✅ Sistem ekonomi yang seimbang\n✅ Dukungan Admin yang responsif\n✅ Update konten berkala\n✅ Komunitas yang ramah dan aktif',
    'event': 'Vonix PS mengadakan event mingguan dengan hadiah menarik! Bergabunglah dengan Discord atau grup WhatsApp kami untuk informasi terbaru tentang event.',
    'error': 'Jika kamu mengalami error, coba beberapa solusi berikut:\n\n1. Pastikan koneksi internet stabil\n2. Restart game Growtopia\n3. Cek kembali konfigurasi hosts atau PowerTunnel\n4. Periksa adanya update server di Discord atau WhatsApp\n5. Hubungi admin melalui tombol di bawah jika masalah berlanjut',
    'item': 'Vonix PS memiliki berbagai item unik dan eksklusif! Kamu bisa mendapatkannya melalui event, trading, atau memenangkannya di giveaway.',
    'trade': 'Sistem trading di Vonix PS aman dan mudah digunakan. Pastikan selalu berhati-hati saat melakukan trade dengan pemain lain.',
    'world': 'Di Vonix PS, kamu bisa membuat duniamu sendiri! Gunakan block dan item untuk membangun dunia impianmu.',
    'cheat': 'Vonix PS menerapkan kebijakan anti-cheat yang ketat. Pemain yang ketahuan menggunakan cheat akan mendapatkan sanksi berupa ban permanen.',
    'bot': 'Bot di Vonix PS digunakan untuk membantu gameplay, seperti Bot Farm untuk pertanian otomatis.',
    'gems': 'Gems dapat diperoleh dengan cara farming, trading, atau membeli dari pemain lain. Gems sangat berguna untuk membeli item di toko.',
    'level': 'Kamu bisa menaikkan level dengan cara farming dan mendapatkan XP. Semakin tinggi levelmu, semakin banyak fitur yang terbuka.',
    'ban': 'Jika akun kamu terkena ban, silakan hubungi admin melalui WhatsApp atau Discord untuk klarifikasi.',
    'update': 'Vonix PS selalu melakukan update secara berkala untuk menambah fitur baru dan memperbaiki bug.',
    'command': 'Beberapa command dasar di Vonix PS:\n\n/help - Menampilkan daftar command\n/msg - Mengirim pesan pribadi ke player lain\n/r - Membalas pesan terakhir\n/sdb - Daftar world yang tersimpan\n/status - Informasi server',
    'lag': 'Jika mengalami lag saat bermain Vonix PS, coba solusi berikut:\n\n1. Pastikan koneksi internet stabil\n2. Tutup aplikasi lain yang berjalan di background\n3. Restart perangkat\n4. Pastikan server tidak sedang dalam maintenance',
    'farmable': 'Item farmable terbaik di Vonix PS antara lain:\n\n🌱 Laser Grid\n🌱 Chandelier\n🌱 Pepper Tree\n🌱 Pinball Bumper\n\nSemakin tinggi rarity item, semakin banyak gems yang didapat.',
    'block': 'Di Vonix PS, kamu bisa mendapatkan block dari:\n\n🧱 Breaking blok lain\n🧱 Membeli di toko\n🧱 Trading dengan pemain lain\n🧱 Hadiah event',
    'growtopia': 'Growtopia adalah game sandbox MMO 2D di mana pemain dapat membangun dunia mereka sendiri. Vonix PS adalah private server dari game ini dengan fitur tambahan dan komunitas yang ramah.',
    'set': 'Set adalah kumpulan item yang memberikan efek khusus jika dipakai bersamaan. Vonix PS memiliki banyak set eksklusif yang tidak ada di server resmi.',
    'lock': 'World Lock adalah mata uang utama di Vonix PS. Kamu bisa menggunakannya untuk mengamankan dunia dan sebagai alat tukar dalam perdagangan.',
    'host': 'Host adalah alamat server yang digunakan untuk terkoneksi ke Vonix PS. Pastikan kamu menggunakan host yang benar untuk bisa bermain.',
    'wl': 'World Lock (WL) adalah mata uang utama di Vonix PS. Nilai 1 WL = 100 gems. Kamu bisa mendapatkan WL dari trading, farming, atau event.',
    'dl': 'Diamond Lock (DL) adalah mata uang tingkat tinggi di Vonix PS. Nilai 1 DL = 100 WL. DL digunakan untuk transaksi item mahal.',
    'private server': 'Private server seperti Vonix PS adalah server tidak resmi yang menyediakan pengalaman bermain alternatif dengan fitur tambahan yang tidak ada di server resmi.',
    'mod': 'Moderator di Vonix PS adalah admin yang bertugas menjaga ketertiban server. Mereka dapat membantu jika kamu mengalami masalah atau pelanggaran.',
    'peraturan': 'Peraturan utama Vonix PS:\n\n⚠️ Dilarang menggunakan cheat/hack\n⚠️ Dilarang melakukan scam\n⚠️ Dilarang melakukan spam\n⚠️ Dilarang bersikap toxic\n⚠️ Hormati sesama pemain\n\nPelanggaran dapat berakibat ban permanen.',
    'drop': 'Item drop rate di Vonix PS lebih tinggi dibanding server resmi, memberikan kesempatan lebih besar untuk mendapatkan item langka.',
    'vend': 'Vending Machine memudahkan kamu berjualan otomatis di Vonix PS. Cukup letakkan item dan tentukan harganya.',
    'donation': 'Vonix PS menerima donasi untuk pengembangan server. Donatur akan mendapatkan benefit khusus seperti role VIP dan item eksklusif.',
    'problem': 'Jika mengalami masalah saat bermain, silakan hubungi admin melalui Discord atau WhatsApp. Jika masalah teknis, gunakan tombol "Tanya Langsung ke Owner" di bawah.',
    'harga': 'DAFTAR HARGA DI VONIX PS:\n\n-ROLE PRICE-\n🔹 Reseller: Rp 500.000\n🔹 Unli+: Rp 300.000\n🔹 Super Developer: Rp 100.000\n🔹 Developer: Rp 75.000\n🔹 VIP+Cheat: Rp 15.000\n\n-TITLE PRICE-\n🔹 Legendary: Rp 30.000\n🔹 G4G & Mentor: Rp 20.000\n🔹 Dr.Tittle & Ssup: Rp 15.000\n\nSilakan hubungi admin untuk pembelian.',
    'price': 'DAFTAR HARGA DI VONIX PS:\n\n-ROLE PRICE-\n🔹 Reseller: Rp 500.000\n🔹 Unli+: Rp 300.000\n🔹 Super Developer: Rp 100.000\n🔹 Developer: Rp 75.000\n🔹 VIP+Cheat: Rp 15.000\n\n-TITLE PRICE-\n🔹 Legendary: Rp 30.000\n🔹 G4G & Mentor: Rp 20.000\n🔹 Dr.Tittle & Ssup: Rp 15.000\n\nSilakan hubungi admin untuk pembelian.',
    'role': 'HARGA ROLE DI VONIX PS:\n\n🔹 Reseller: Rp 500.000\n🔹 Unli+: Rp 300.000\n🔹 Super Developer: Rp 100.000\n🔹 Developer: Rp 75.000\n🔹 VIP+Cheat: Rp 15.000\n\nSetiap role memiliki keuntungan berbeda. Silakan hubungi admin untuk informasi lebih detail dan pembelian.',
    'title': 'HARGA TITLE DI VONIX PS:\n\n🔹 Legendary: Rp 30.000\n🔹 G4G & Mentor: Rp 20.000\n🔹 Dr.Tittle & Ssup: Rp 15.000\n\nTitle memberikan tampilan nama yang unik dalam game. Hubungi admin untuk pembelian.',
    'mata uang': 'Mata uang di Vonix PS terdiri dari:\n\n💰 World Lock (WL): Mata uang dasar, nilai 1 WL = 100 gems\n💎 Diamond Lock (DL): 1 DL = 100 WL, digunakan untuk transaksi besar\n✨ Vonix Gem Lock: Mata uang ekslusif Vonix PS dengan nilai spesial\n\nSemua mata uang ini dapat digunakan untuk trading dan membeli item dalam game.',
    'currency': 'Mata uang di Vonix PS terdiri dari:\n\n💰 World Lock (WL): Mata uang dasar, nilai 1 WL = 100 gems\n💎 Diamond Lock (DL): 1 DL = 100 WL, digunakan untuk transaksi besar\n✨ Vonix Gem Lock: Mata uang ekslusif Vonix PS dengan nilai spesial\n\nSemua mata uang ini dapat digunakan untuk trading dan membeli item dalam game.',
    'vonix gem lock': 'Vonix Gem Lock adalah mata uang premium eksklusif di server Vonix PS. Mata uang ini memiliki nilai yang lebih tinggi dan dapat digunakan untuk membeli item spesial yang tidak bisa dibeli dengan WL atau DL biasa.',
    'vgl': 'Vonix Gem Lock (VGL) adalah mata uang premium eksklusif di server Vonix PS. Mata uang ini memiliki nilai yang lebih tinggi dan dapat digunakan untuk membeli item spesial yang tidak bisa dibeli dengan WL atau DL biasa.',
    'kamu siapa': 'Saya adalah Vonix Assistant, asisten virtual yang siap membantu kamu dengan informasi seputar Vonix PS. Tanya saja apa yang ingin kamu ketahui!',
    'pembuat': 'Server Vonix PS dibuat oleh Kuzuroken (Owner utama). Berikut struktur tim Vonix PS:\n\n👑 Owner: Kuzuroken\n🔹 Tangan Kanan: Dhill\n🔹 STAFF: AditBilek, akashi, Sin\n🔹 Designer: Jul, SomeBodysPleasure',
    'owner': 'Server Vonix PS dibuat oleh Kuzuroken (Owner utama). Berikut struktur tim Vonix PS:\n\n👑 Owner: Kuzuroken\n🔹 Tangan Kanan: Dhill\n🔹 STAFF: AditBilek, akashi, Sin\n🔹 Designer: Jul, SomeBodysPleasure',
    'pendiri': 'Server Vonix PS dibuat oleh Kuzuroken (Owner utama). Berikut struktur tim Vonix PS:\n\n👑 Owner: Kuzuroken\n🔹 Tangan Kanan: Dhill\n🔹 STAFF: AditBilek, akashi, Sin\n🔹 Designer: Jul, SomeBodysPleasure',
    'kuzu': 'Kuzuroken adalah owner utama Vonix PS. Berikut struktur tim Vonix PS:\n\n👑 Owner: Kuzuroken\n🔹 Tangan Kanan: Dhill\n🔹 STAFF: AditBilek, akashi, Sin\n🔹 Designer: Jul, SomeBodysPleasure',
    'kuzuroken': 'Kuzuroken adalah owner utama Vonix PS. Berikut struktur tim Vonix PS:\n\n👑 Owner: Kuzuroken\n🔹 Tangan Kanan: Dhill\n🔹 STAFF: AditBilek, akashi, Sin\n🔹 Designer: Jul, SomeBodysPleasure',
    'tim': 'Struktur Tim Vonix PS:\n\n👑 Owner: Kuzuroken\n🔹 Tangan Kanan: Dhill\n🔹 STAFF: AditBilek, akashi, Sin\n🔹 Designer: Jul, SomeBodysPleasure',
    'team': 'Struktur Tim Vonix PS:\n\n👑 Owner: Kuzuroken\n🔹 Tangan Kanan: Dhill\n🔹 STAFF: AditBilek, akashi, Sin\n🔹 Designer: Jul, SomeBodysPleasure',
    'staff': 'STAFF Vonix PS terdiri dari:\n\n👑 Owner: Kuzuroken\n🔹 Tangan Kanan: Dhill\n🔹 STAFF: AditBilek, akashi, Sin\n🔹 Designer: Jul, SomeBodysPleasure',
    'struktur': 'Struktur Tim Vonix PS:\n\n👑 Owner: Kuzuroken\n🔹 Tangan Kanan: Dhill\n🔹 STAFF: AditBilek, akashi, Sin\n🔹 Designer: Jul, SomeBodysPleasure'
};

async function askGeminiAI(question) {
    const apiKey = "AIzaSyB4HLLuGygY8OA4Kq1jSgfLBU0foMaHapM";
    const apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";
    
    try {
        console.log("Memanggil Gemini API dengan pertanyaan:", question);
        const response = await fetch(`${apiUrl}?key=${apiKey}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: `Tolong jawab pertanyaan ini dalam bahasa Indonesia dengan singkat namun lengkap: ${question}. Berikan jawaban yang informatif dan akurat.`
                    }]
                }]
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            console.error("Error dari API Gemini:", errorData);
            throw new Error(`API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
        }
        
        const data = await response.json();
        console.log("Respons dari Gemini API:", data);
        if (data && data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts[0].text) {
            return data.candidates[0].content.parts[0].text;
        } else {
            console.error("Format respons tidak sesuai:", data);
            return "Maaf, saya tidak dapat menjawab pertanyaan itu saat ini. Coba pertanyaan lain.";
        }
    } catch (error) {
        console.error("Error saat memanggil Gemini AI:", error);
        return "Maaf, terjadi kesalahan teknis saat mencoba menjawab pertanyaan Anda. Coba pertanyaan tentang Vonix PS.";
    }
}

function sendChatMessage() {
    const message = chatInput.value.trim();
    if (message === '') return;

    const now = new Date();
    const hours = now.getHours().toString().padStart(2, '0');
    const minutes = now.getMinutes().toString().padStart(2, '0');
    const timestamp = `${hours}:${minutes}`;

    const userMessageDiv = document.createElement('div');
    userMessageDiv.className = 'user-message';
    userMessageDiv.textContent = message;
    userMessageDiv.setAttribute('data-time', timestamp);
    chatMessages.appendChild(userMessageDiv);
    chatInput.value = '';

    chatMessages.scrollTop = chatMessages.scrollHeight;
    

    const typingIndicator = document.createElement('div');
    typingIndicator.className = 'bot-message typing-indicator';
    typingIndicator.innerHTML = '<span></span><span></span><span></span>';
    typingIndicator.setAttribute('data-time', timestamp);
    chatMessages.appendChild(typingIndicator);
    chatMessages.scrollTop = chatMessages.scrollHeight;

    handleUserMessage(message, timestamp, typingIndicator);
}

async function handleUserMessage(message, timestamp, typingIndicator) {
    const lowerMessage = message.toLowerCase();

    let botReply = '';
    let showAskOwnerButton = false;
    let showTiktokButton = false;
    let usingGemini = false;
    
    const categories = {
        'bermain': ['cara main', 'cara bermain', 'mulai main', 'mulai bermain', 'tutorial', 'panduan'],
        'masalah': ['error', 'bug', 'crash', 'lag', 'lambat', 'tidak bisa', 'gagal', 'problem', 'masalah'],
        'kontak': ['admin', 'kontak', 'hubungi', 'owner', 'moderator', 'mod', 'help'],
        'fitur': ['fitur', 'feature', 'apa aja', 'ada apa', 'bisa apa'],
        'item': ['item', 'barang', 'benda', 'set', 'drop', 'farmable', 'dapet item'],
        'ekonomi': ['trade', 'jual', 'beli', 'ekonomi', 'wl', 'dl', 'lock', 'diamond', 'gems', 'vend'],
        'harga': ['harga', 'price', 'biaya', 'beli role', 'beli title', 'berapa', 'bayar', 'donasi', 'donation'],
        'role': ['role', 'reseller', 'unli', 'developer', 'super developer', 'vip', 'cheat'],
        'title': ['title', 'gelar', 'legendary', 'mentor', 'g4g', 'dr', 'ssup'],
        'mata uang': ['mata uang', 'currency', 'vonix gem lock', 'vgl', 'world lock', 'diamond lock', 'uang']
    };

    let isVonixRelated = false;

    const vonixKeywords = ['vonix', 'server', 'ps', 'growtopia', 'private server', 'pembuat', 'owner', 'kuzu', 'kuzuroken',
                           'event', 'title', 'role', 'admin', 'world lock', 'wl', 'dl', 'vgl', 'gems', 'items', 
                           'bot', 'command', 'download', 'play', 'dhill'];
                           

    for (const keyword of vonixKeywords) {
        if (lowerMessage.includes(keyword)) {
            isVonixRelated = true;
            break;
        }
    }

    for (const [category, keywords] of Object.entries(categories)) {
        if (keywords.some(word => lowerMessage.includes(word))) {

            for (const key in botResponses) {
                if (lowerMessage.includes(key)) {
                    botReply = botResponses[key];
                    break;
                }
            }

            if (!botReply) {
                switch (category) {
                    case 'bermain':
                        botReply = botResponses['cara bermain'];
                        break;
                    case 'masalah':
                        botReply = botResponses['error'];
                        break;
                    case 'kontak':
                        botReply = botResponses['admin'];
                        break;
                    case 'fitur':
                        botReply = botResponses['fitur'];
                        break;
                    case 'item':
                        botReply = botResponses['item'];
                        break;
                    case 'ekonomi':
                        botReply = botResponses['wl'];
                        break;
                    case 'harga':
                        botReply = botResponses['harga'];
                        break;
                    case 'role':
                        botReply = botResponses['role'];
                        break;
                    case 'title':
                        botReply = botResponses['title'];
                        break;
                    case 'mata uang':
                        botReply = botResponses['mata uang'];
                        break;
                }
            }
            
            break;
        }
    }

    if (!botReply) {
        for (const key in botResponses) {
            if (lowerMessage.includes(key)) {
                botReply = botResponses[key];
                break;
            }
        }
    }

    if (!botReply) {
        if (lowerMessage.includes('discord')) {
            botReply = 'Kamu bisa bergabung dengan Discord Vonix PS melalui link di halaman utama. Kami memiliki komunitas yang aktif di sana!';
        } else if (lowerMessage.includes('whatsapp') || lowerMessage.includes('wa')) {
            botReply = 'Kamu bisa bergabung dengan grup WhatsApp Vonix PS melalui link di halaman utama.';
        } else if (lowerMessage.includes('terima kasih') || lowerMessage.includes('makasih') || lowerMessage.includes('thanks')) {
            botReply = 'Sama-sama! 😊 Senang bisa membantu.';
        } else if (lowerMessage.includes('siapa kamu') || lowerMessage.includes('siapa kau') || lowerMessage.includes('bot apa') || lowerMessage.includes('kamu siapa')) {
            botReply = 'Saya adalah Vonix Assistant, asisten virtual yang siap membantu kamu dengan informasi seputar Vonix PS dan pertanyaan umum lainnya. Tanya saja apa yang ingin kamu ketahui!';
        } 
        else if ((lowerMessage.includes('nomor') || lowerMessage.includes('kontak') || lowerMessage.includes('hubungi') || lowerMessage.includes('wa') || lowerMessage.includes('whatsapp')) && 
                 (lowerMessage.includes('owner') || lowerMessage.includes('admin') || lowerMessage.includes('pemilik') || lowerMessage.includes('kuzu'))) {
            console.log("Mendeteksi permintaan kontak owner...");
            botReply = 'Berikut adalah kontak owner Vonix PS (Kuzuroken):';
            showAskOwnerButton = true; 
        } 

        else if ((lowerMessage.includes('sosial') || lowerMessage.includes('media') || lowerMessage.includes('medsos') || lowerMessage.includes('sosmed') || 
                  lowerMessage.includes('tiktok') || lowerMessage.includes('instagram') || lowerMessage.includes('ig')) && 
                 (lowerMessage.includes('owner') || lowerMessage.includes('admin') || lowerMessage.includes('pemilik') || lowerMessage.includes('kuzu'))) {
            console.log("Mendeteksi permintaan sosial media owner...");
            botReply = 'Berikut adalah sosial media owner Vonix PS (Kuzuroken):';
            showTiktokButton = true; 
        }
        else if (lowerMessage.includes('pembuat') || lowerMessage.includes('owner') || lowerMessage.includes('kuzu') || lowerMessage.includes('kuzuroken') || 
                 lowerMessage.includes('pendiri') || lowerMessage.includes('tim') || lowerMessage.includes('team') || 
                 lowerMessage.includes('staff') || lowerMessage.includes('struktur')) {
            if (lowerMessage.includes('tim') || lowerMessage.includes('team') || lowerMessage.includes('staff') || lowerMessage.includes('struktur')) {
                botReply = botResponses['struktur'];
            } else {
                botReply = botResponses['pembuat'];
            }
            

            console.log("Menampilkan info struktur dan tombol TikTok...");
            showTiktokButton = true;
        }

        else if (!isVonixRelated) {
            usingGemini = true;
        } else {

            botReply = 'Maaf, saya tidak dapat menjawab pertanyaan tersebut. Ingin langsung bertanya kepada owner Vonix PS?';
            showAskOwnerButton = true;
        }
    }


    setTimeout(() => {
        typingIndicator.remove();

        if (usingGemini) {
            (async () => {
                try {
                    const geminiResponse = await askGeminiAI(message);
                    displayBotMessage(geminiResponse, timestamp, false, false);
                } catch (error) {
                    console.error("Error saat mendapatkan respons Gemini:", error);
                    displayBotMessage("Maaf, saya tidak dapat menjawab pertanyaan tersebut saat ini. Coba tanyakan hal lain atau tanyakan tentang Vonix PS.", timestamp, false, false);
                }
            })();
        } else {

            displayBotMessage(botReply, timestamp, showAskOwnerButton, showTiktokButton);
        }
    }, 1000);
}


function displayBotMessage(message, timestamp, showAskOwnerButton, showTiktokButton) {
    const botMessageDiv = document.createElement('div');
    botMessageDiv.className = 'bot-message';
    botMessageDiv.textContent = message;
    botMessageDiv.setAttribute('data-time', timestamp);
    chatMessages.appendChild(botMessageDiv);
    
    console.log("Status tombol: showAskOwnerButton =", showAskOwnerButton, "showTiktokButton =", showTiktokButton);

    if (showAskOwnerButton) {
        console.log("Menampilkan tombol WhatsApp...");
        setTimeout(() => {
            const askOwnerButton = document.createElement('div');
            askOwnerButton.className = 'bot-message ask-owner-button';
            askOwnerButton.innerHTML = '<button onclick="askOwnerViaWhatsApp(\'Saya ingin bertanya tentang Vonix PS\')">Hubungi Owner via WhatsApp</button>';
            chatMessages.appendChild(askOwnerButton);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }, 300);
    }

    if (showTiktokButton) {
        console.log("Menampilkan tombol TikTok...");
        setTimeout(() => {
            const tiktokButton = document.createElement('div');
            tiktokButton.className = 'bot-message ask-owner-button';
            tiktokButton.innerHTML = '<button onclick="openOwnerTikTok()" class="tiktok-button">Lihat TikTok Owner</button>';
            chatMessages.appendChild(tiktokButton);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }, 600);
    }
    
    chatMessages.scrollTop = chatMessages.scrollHeight;
}


function askOwnerViaWhatsApp(question) {
    const encodedQuestion = encodeURIComponent('Halo Owner Vonix PS, saya mau bertanya: ' + question);
    window.open(`https://wa.me/6281527641306?text=${encodedQuestion}`, '_blank');
}

function openOwnerTikTok() {
    console.log("Membuka TikTok Owner"); 
    try {
        window.open('https://www.tiktok.com/@orenni', '_blank');
    } catch (e) {
        console.error("Error saat membuka TikTok:", e);

        alert("Silakan kunjungi TikTok owner di: https://www.tiktok.com/@orenni");
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const tiktokStyle = document.createElement('style');
    tiktokStyle.textContent = `
        .ask-owner-button {
            display: flex;
            justify-content: center;
            margin-top: 10px;
            margin-bottom: 10px;
            padding: 5px;
        }
        
        .ask-owner-button button {
            background: linear-gradient(135deg, #25D366, #128C7E);
            color: white;
            border: none;
            border-radius: 20px;
            padding: 10px 18px;
            font-family: 'Poppins', sans-serif;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            font-weight: 500;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
        }
        
        .ask-owner-button button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
            background: linear-gradient(135deg, #128C7E, #075E54);
        }
        
        .ask-owner-button button::before {
            content: '\\f232';
            font-family: 'Font Awesome\\ 5 Brands';
            margin-right: 8px;
            font-size: 16px;
        }

        .tiktok-button {
            background: linear-gradient(135deg, #EE1D52, #69C9D0) !important;
        }
        
        .tiktok-button:hover {
            background: linear-gradient(135deg, #69C9D0, #EE1D52) !important;
        }
        
        .tiktok-button::before {
            content: '\\f97b' !important;
        }
    `;
    document.head.appendChild(tiktokStyle);
});


document.addEventListener('DOMContentLoaded', function() {

    
    const typingStyle = document.createElement('style');
    typingStyle.textContent = `
        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            max-width: 50%;
            min-width: 80px;
        }
        
        .typing-indicator span {
            height: 10px;
            width: 10px;
            float: left;
            margin: 0 2px;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 50%;
            opacity: 0.4;
            animation: typing 1s infinite;
        }
        
        .typing-indicator span:nth-of-type(1) {
            animation-delay: 0s;
        }
        
        .typing-indicator span:nth-of-type(2) {
            animation-delay: 0.33s;
        }
        
        .typing-indicator span:nth-of-type(3) {
            animation-delay: 0.66s;
        }
        
        @keyframes typing {
            0% {
                transform: scale(1);
                opacity: 0.4;
            }
            50% {
                transform: scale(1.4);
                opacity: 1;
            }
            100% {
                transform: scale(1);
                opacity: 0.4;
            }
        }
    `;
    document.head.appendChild(typingStyle);
});


sendMessage.addEventListener('click', sendChatMessage);

chatInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendChatMessage();
    }
});

const shareToggle = document.getElementById('shareToggle');
const shareDropdown = document.getElementById('shareDropdown');

shareToggle.addEventListener('click', function() {
    shareDropdown.classList.toggle('active');
});

document.addEventListener('click', function(event) {
    if (!shareToggle.contains(event.target) && !shareDropdown.contains(event.target)) {
        shareDropdown.classList.remove('active');
    }
});

function shareViaFacebook() {
    const url = encodeURIComponent(window.location.href);
    const title = encodeURIComponent('Ayo bergabung dengan Vonix PS!');
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${url}&t=${title}`, '_blank');
}

function shareViaTwitter() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent('Ayo bergabung dengan Vonix PS! Server Growtopia terbaik! 🎮');
    window.open(`https://twitter.com/intent/tweet?url=${url}&text=${text}`, '_blank');
}

function shareViaWhatsApp() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent('Ayo bergabung dengan Vonix PS! Server Growtopia terbaik! 🎮');
    window.open(`https://wa.me/?text=${text} ${url}`, '_blank');
}

function shareViaTikTok() {
    window.open('https://www.tiktok.com/', '_blank');
}

// Firebase Configuration
const firebaseConfig = {
    apiKey: "AIzaSyBQJSlxeUcyKbBh_a9hJdmyVYDrDxT_F5Q",
    authDomain: "vonix-ps-chat.firebaseapp.com",
    databaseURL: "https://vonix-ps-chat-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "vonix-ps-chat",
    storageBucket: "vonix-ps-chat.appspot.com",
    messagingSenderId: "297809543925",
    appId: "1:297809543925:web:dc13bfe5c60abbb56c5bf2"
};

// Variable untuk Firebase Storage
let storage;
let database;

// Initialize Firebase hanya sekali
if (!firebase.apps.length) {
    firebase.initializeApp(firebaseConfig);
} else {
    firebase.app(); // Jika sudah ada, gunakan yang sudah ada
}

database = firebase.database();
storage = firebase.storage();

// Tambahkan aturan CORS
const storageRef = storage.ref();
const metadata = {
    contentType: 'image/jpeg',
    customMetadata: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE',
        'Access-Control-Allow-Headers': 'Content-Type'
    }
};

// Chat dengan Owner
const ownerChatIcon = document.getElementById('ownerChatIcon');
const ownerChatContainer = document.getElementById('ownerChatContainer');
const closeOwnerChat = document.getElementById('closeOwnerChat');
const nameInputContainer = document.getElementById('nameInputContainer');
const ownerChatMessages = document.getElementById('ownerChatMessages');
const ownerChatInputContainer = document.getElementById('ownerChatInputContainer');
const userNameInput = document.getElementById('userNameInput');
const startChatBtn = document.getElementById('startChatBtn');
const ownerChatInput = document.getElementById('ownerChatInput');
const sendOwnerMessage = document.getElementById('sendOwnerMessage');

let userName = '';
let userChatId = '';

// Cek apakah user sudah pernah chat sebelumnya
document.addEventListener('DOMContentLoaded', function() {
    // Cek localStorage untuk data chat sebelumnya
    const savedUserName = localStorage.getItem('vonix_chat_username');
    const savedChatId = localStorage.getItem('vonix_chat_id');
    
    if (savedUserName && savedChatId) {
        // User sudah pernah chat, langsung tampilkan chat
        userName = savedUserName;
        userChatId = savedChatId;
        
        // Tampilkan UI chat
        nameInputContainer.style.display = 'none';
        ownerChatMessages.style.display = 'flex';
        ownerChatInputContainer.style.display = 'flex';
        // Tombol ganti nama sekarang selalu terlihat di header
        
        // Load chat history
        loadChatHistory();
        
        // Listen untuk pesan baru
        listenForOwnerMessages();
    }
});

// Buka chat dengan owner
ownerChatIcon.addEventListener('click', function() {
    ownerChatContainer.classList.add('open');
    ownerChatIcon.style.display = 'none';
    
    // Jika sudah ada chat sebelumnya, scroll ke bawah
    if (userName && userChatId) {
        setTimeout(() => {
            ownerChatMessages.scrollTop = ownerChatMessages.scrollHeight;
        }, 300);
    }
});

// Tutup chat dengan owner
closeOwnerChat.addEventListener('click', function() {
    ownerChatContainer.classList.remove('open');
    setTimeout(() => {
        ownerChatIcon.style.display = 'flex';
    }, 300);
});

// Mulai chat setelah input nama
startChatBtn.addEventListener('click', function() {
    startChat();
});

userNameInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        startChat();
    }
});

// Update loadChatHistory untuk menangani pesan dengan gambar
function loadChatHistory() {
    const systemMessage = document.createElement('div');
    systemMessage.className = 'system-message';
    systemMessage.textContent = `Halo ${userName}! Silakan ketik pesan untuk Owner Vonix PS.`;
    ownerChatMessages.appendChild(systemMessage);
    
    // Ambil chat dari Firebase
    database.ref(`chats/${userChatId}/messages`).once('value', (snapshot) => {
        const messages = snapshot.val();
        
        if (messages) {
            // Urutkan pesan berdasarkan timestamp
            const sortedMessages = Object.entries(messages)
                .sort(([, a], [, b]) => a.timestamp - b.timestamp);
            
            // Set untuk melacak pesan yang sudah ditampilkan
            const displayedMessageIds = new Set();
            
            // Tampilkan setiap pesan, gunakan ID untuk menghindari duplikasi
            sortedMessages.forEach(([messageId, messageData]) => {
                // Skip jika pesan ini sudah ditampilkan
                if (displayedMessageIds.has(messageId)) {
                    return;
                }
                
                if (messageData.sender === 'user') {
                    if (messageData.messageType === 'image') {
                        displayUserImageMessage(messageData.imageURL);
                    } else {
                        displayUserMessage(messageData.message, messageData.status === 'read');
                    }
                } else if (messageData.sender === 'owner') {
                    if (messageData.messageType === 'image') {
                        displayOwnerImageMessage(messageData.imageURL, messageData.timestamp, messageId);
                    } else {
                        displayOwnerMessage(messageData.message, messageData.timestamp, messageId);
                    }
                }
                
                // Tandai pesan ini sudah ditampilkan
                displayedMessageIds.add(messageId);
            });
            
            // Scroll ke pesan terbaru
            ownerChatMessages.scrollTop = ownerChatMessages.scrollHeight;
        }
    });
    
    // Update status online
    database.ref(`chats/${userChatId}`).update({
        last_activity: firebase.database.ServerValue.TIMESTAMP,
        status: 'active'
    });
}

// Fungsi untuk memulai chat
function startChat() {
    userName = userNameInput.value.trim();
    
    if (userName === '') {
        // Animasi shake jika nama kosong
        userNameInput.classList.add('shake');
        setTimeout(() => {
            userNameInput.classList.remove('shake');
        }, 500);
        return;
    }
    
    // Generate unique ID untuk user jika belum ada
    if (!userChatId) {
        userChatId = generateUserId();
    }
    
    // Simpan data user di localStorage
    localStorage.setItem('vonix_chat_username', userName);
    localStorage.setItem('vonix_chat_id', userChatId);
    
    // Sembunyikan form nama dan tampilkan chat
    nameInputContainer.style.display = 'none';
    ownerChatMessages.style.display = 'flex';
    ownerChatInputContainer.style.display = 'flex';
    // Tombol ganti nama sekarang selalu terlihat di header
    
    // Tambahkan pesan selamat datang
    const welcomeMessage = document.createElement('div');
    welcomeMessage.className = 'system-message';
    welcomeMessage.textContent = `Halo ${userName}! Silakan ketik pesan untuk Owner Vonix PS.`;
    ownerChatMessages.appendChild(welcomeMessage);
    
    // Set user data di Firebase
    database.ref(`chats/${userChatId}`).update({
        name: userName,
        last_activity: firebase.database.ServerValue.TIMESTAMP,
        status: 'active'
    }).then(() => {
        // Jika ini adalah pertama kali chat, set created_at
        return database.ref(`chats/${userChatId}/created_at`).once('value');
    }).then((snapshot) => {
        if (!snapshot.exists()) {
            // Jika created_at belum ada, berarti ini chat baru
            return database.ref(`chats/${userChatId}`).update({
                created_at: firebase.database.ServerValue.TIMESTAMP
            });
        }
    }).catch(error => {
        console.error("Error saat menyimpan data user:", error);
    });
    
    // Listen untuk pesan dari owner
    listenForOwnerMessages();
}

// Generate unique ID untuk user
function generateUserId() {
    return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

// Kirim pesan ke owner
sendOwnerMessage.addEventListener('click', function() {
    sendMessageToOwner();
});

ownerChatInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessageToOwner();
    }
});

// Fungsi untuk mengirim pesan ke owner
function sendMessageToOwner() {
    const message = ownerChatInput.value.trim();
    if (message === '') return;
    
    const now = new Date();
    const timestamp = now.getTime();
    
    // Tampilkan pesan di chat
    displayUserMessage(message, false);
    
    // Log untuk debugging
    console.log("Mengirim pesan ke Firebase:", message);
    console.log("Chat ID:", userChatId);
    
    // Simpan pesan di Firebase dengan promise chain untuk memastikan terkirim
    const newMessageRef = database.ref(`chats/${userChatId}/messages`).push();
    newMessageRef.set({
        sender: 'user',
        name: userName,
        message: message,
        timestamp: timestamp,
        status: 'waiting'
    })
    .then(() => {
        console.log("Pesan berhasil disimpan di Firebase");
        
        // Update waktu aktivitas terakhir
        return database.ref(`chats/${userChatId}`).update({
            last_activity: timestamp
        });
    })
    .then(() => {
        console.log("Waktu aktivitas berhasil diupdate");
    })
    .catch(error => {
        console.error("Error menyimpan pesan:", error);
        
        // Tampilkan error ke user
        const errorMessage = document.createElement('div');
        errorMessage.className = 'system-message';
        errorMessage.textContent = "Gagal mengirim pesan. Silakan coba lagi.";
        errorMessage.style.color = "#ff5757";
        ownerChatMessages.appendChild(errorMessage);
        ownerChatMessages.scrollTop = ownerChatMessages.scrollHeight;
    });
    
    // Bersihkan input
    ownerChatInput.value = '';
}

// Tampilkan pesan user di chat
function displayUserMessage(message, isRead = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'user-message';
    messageDiv.textContent = message;
    
    const statusDiv = document.createElement('div');
    statusDiv.className = isRead ? 'message-status' : 'message-status waiting-status';
    statusDiv.textContent = isRead ? 'Telah dibaca' : 'Menunggu balasan...';
    messageDiv.appendChild(statusDiv);
    
    ownerChatMessages.appendChild(messageDiv);
    ownerChatMessages.scrollTop = ownerChatMessages.scrollHeight;
}

// Tampilkan pesan owner di chat
function displayOwnerMessage(message, timestamp, messageId) {
    // Buat ID konsisten untuk pesan jika tidak ada
    messageId = messageId || `owner_${timestamp}_${hashMessage(message)}`;
    
    // Periksa apakah pesan dengan ID ini sudah ada
    const existingMsg = document.querySelector(`.owner-message[data-id="${messageId}"]`);
    if (existingMsg) {
        console.log("Pesan dengan ID ini sudah ditampilkan:", messageId);
        return;
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'owner-message';
    messageDiv.dataset.timestamp = timestamp || Date.now(); // Simpan timestamp untuk deteksi duplikat
    messageDiv.dataset.id = messageId; // Simpan ID pesan
    
    const nameDiv = document.createElement('div');
    nameDiv.className = 'owner-message-name';
    nameDiv.textContent = 'Owner Vonix PS';
    messageDiv.appendChild(nameDiv);
    
    const messageContent = document.createElement('div');
    messageContent.textContent = message;
    messageDiv.appendChild(messageContent);
    
    ownerChatMessages.appendChild(messageDiv);
    ownerChatMessages.scrollTop = ownerChatMessages.scrollHeight;
}

// Fungsi hash sederhana untuk pesan
function hashMessage(message) {
    let hash = 0;
    for (let i = 0; i < message.length; i++) {
        const char = message.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash).toString(16).substring(0, 8);
}

// Listen untuk pesan dari owner dengan penanganan error yang lebih baik
function listenForOwnerMessages() {
    console.log("Mulai mendengarkan pesan dari owner, chat ID:", userChatId);
    
    // Track pesan yang sudah ditampilkan berdasarkan ID pesan
    const displayedMessages = new Set();

    // Bersihkan listener yang ada untuk menghindari duplikasi
    database.ref(`chats/${userChatId}/messages`).off();
    
    // Gunakan once() terlebih dahulu untuk load pesan yang ada
    database.ref(`chats/${userChatId}/messages`).once('value', (snapshot) => {
        const existingMessages = snapshot.val() || {};
        
        // Tambahkan semua ID pesan yang sudah ada ke Set
        Object.keys(existingMessages).forEach(msgId => {
            displayedMessages.add(msgId);
        });
        
        // Setelah mendapatkan semua pesan yang ada, barulah listen untuk pesan baru
        database.ref(`chats/${userChatId}/messages`).on('child_added', (snapshot) => {
            const messageId = snapshot.key;
            const messageData = snapshot.val();
            
            console.log("Pesan terdeteksi:", messageData, "ID:", messageId);
            
            // Jika pesan ini sudah ditampilkan, skip
            if (displayedMessages.has(messageId)) {
                console.log("Pesan sudah ditampilkan, skip:", messageId);
                return;
            }
            
            // Tandai pesan ini sudah ditampilkan
            displayedMessages.add(messageId);
            
            // Jika pesan dari owner, tampilkan
            if (messageData.sender === 'owner') {
                console.log("Menampilkan pesan owner:", messageData.message);
                
                // Cek tipe pesan (teks atau gambar)
                if (messageData.messageType === 'image') {
                    // Tampilkan pesan dengan gambar
                    displayOwnerImageMessage(messageData.imageURL, messageData.timestamp, messageId);
                } else {
                    // Tampilkan pesan teks biasa
                    displayOwnerMessage(messageData.message, messageData.timestamp, messageId);
                }
                
                // Play notification sound
                playNotificationSound();
                
                // Update status pesan user sebelumnya
                updateUserMessageStatus();
            }
            
            // Jika pesan dari user dan status berubah jadi read
            if (messageData.sender === 'user' && messageData.status === 'read') {
                // Update tampilan pesan read
                updateUserMessageStatus();
            }
        }, (error) => {
            console.error("Error saat mendengarkan pesan baru:", error);
        });
    });
}

// Update status pesan user
function updateUserMessageStatus() {
    // Cari semua pesan user dengan status "menunggu balasan"
    const waitingStatusElements = ownerChatMessages.querySelectorAll('.waiting-status');
    waitingStatusElements.forEach(element => {
        element.textContent = 'Telah dibaca';
        element.classList.remove('waiting-status');
    });
}

// Putar suara notifikasi
function playNotificationSound() {
    const audio = new Audio('https://cdn.pixabay.com/download/audio/2021/08/04/audio_0625c1cec9.mp3?filename=notification-sound-7062.mp3');
    audio.volume = 0.5;
    audio.play().catch(e => console.log('Audio play failed:', e));
}

// Buat file untuk admin
// File admin.html harus dibuat secara terpisah
document.addEventListener('DOMContentLoaded', function() {
    const chatStyle = document.createElement('style');
    chatStyle.textContent = `
        .shake {
            animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }
        
        @keyframes shake {
            10%, 90% {
                transform: translate3d(-1px, 0, 0);
            }
            20%, 80% {
                transform: translate3d(2px, 0, 0);
            }
            30%, 50%, 70% {
                transform: translate3d(-4px, 0, 0);
            }
            40%, 60% {
                transform: translate3d(4px, 0, 0);
            }
        }
    `;
    document.head.appendChild(chatStyle);
});

// Function untuk logging ke console debug
function log(message, type = 'info') {
    console.log(`[${type.toUpperCase()}] ${message}`);
    
    // Jika tidak ada debug console di UI, keluar
    if (!document.getElementById('debugContent')) return;
    
    const logElement = document.createElement('div');
    logElement.className = 'log log-' + type;
    
    if (typeof message === 'object') {
        try {
            message = JSON.stringify(message, null, 2);
        } catch (e) {
            message = 'Object (lihat di browser console)';
            console.log(message);
        }
    }
    
    logElement.textContent = message;
    
    const debugContent = document.getElementById('debugContent');
    if (debugContent) {
        debugContent.appendChild(logElement);
        debugContent.scrollTop = debugContent.scrollHeight;
    }
}

// Tambahkan event listener untuk tombol upload gambar
const uploadImageBtn = document.getElementById('uploadImageBtn');
const imageFileInput = document.getElementById('imageFileInput');
const imagePreviewModal = document.getElementById('imagePreviewModal');
const previewImage = document.getElementById('previewImage');
const closeImagePreview = document.getElementById('closeImagePreview');

// Buka file picker ketika tombol upload diklik
uploadImageBtn.addEventListener('click', () => {
    imageFileInput.click();
});

// Proses upload gambar ketika file dipilih
imageFileInput.addEventListener('change', (e) => {
    if (e.target.files.length > 0) {
        const file = e.target.files[0];
        
        // Validasi tipe file
        if (!file.type.match('image.*')) {
            alert('Hanya file gambar yang diperbolehkan');
            return;
        }
        
        // Validasi ukuran file (maksimal 5MB)
        if (file.size > 5 * 1024 * 1024) {
            alert('Ukuran file maksimal 5MB');
            return;
        }
        
        uploadImageToChat(file);
    }
});

// Fungsi untuk upload gambar ke chat
function uploadImageToChat(file) {
    if (!userChatId) {
        alert('Anda harus masuk terlebih dahulu');
        return;
    }
    
    const now = new Date();
    const timestamp = now.getTime();
    const fileName = `user_${userChatId}_${timestamp}_${file.name.replace(/[^a-zA-Z0-9.]/g, '_')}`;
    
    // Tampilkan pesan loading
    const loadingMessage = document.createElement('div');
    loadingMessage.className = 'user-message';
    
    const loadingContainer = document.createElement('div');
    loadingContainer.className = 'image-loading';
    loadingContainer.innerHTML = '<i class="fas fa-spinner"></i> Mengunggah gambar...';
    loadingMessage.appendChild(loadingContainer);
    
    const progressContainer = document.createElement('div');
    progressContainer.className = 'upload-progress';
    const progressBar = document.createElement('div');
    progressBar.className = 'progress-bar';
    progressContainer.appendChild(progressBar);
    loadingMessage.appendChild(progressContainer);
    
    ownerChatMessages.appendChild(loadingMessage);
    ownerChatMessages.scrollTop = ownerChatMessages.scrollHeight;
    
    // Referensi ke storage
    const storageRef = storage.ref(`chat_images/${fileName}`);
    
    // Set metadata untuk CORS
    const metadata = {
        contentType: file.type,
        customMetadata: {
            'uploadedBy': userName,
            'timestamp': timestamp.toString(),
            'chatId': userChatId,
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE',
            'Access-Control-Allow-Headers': 'Content-Type'
        }
    };
    
    // Upload file dengan metadata
    const uploadTask = storageRef.put(file, metadata);
    
    // Monitor progress upload
    uploadTask.on('state_changed', 
        // Progress handler
        (snapshot) => {
            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
            progressBar.style.width = progress + '%';
        },
        // Error handler
        (error) => {
            console.error('Error upload:', error);
            loadingContainer.innerHTML = '<i class="fas fa-exclamation-circle"></i> Gagal mengunggah gambar';
            loadingContainer.style.color = '#ff5757';
            
            // Tampilkan pesan error yang lebih detail
            const errorDetails = document.createElement('div');
            errorDetails.textContent = `Error: ${error.code} - ${error.message}`;
            errorDetails.style.fontSize = '12px';
            errorDetails.style.marginTop = '5px';
            loadingContainer.appendChild(errorDetails);
        },
        // Completion handler
        async () => {
            try {
                // Dapatkan URL download
                const downloadURL = await uploadTask.snapshot.ref.getDownloadURL();
                
                // Pastikan URL menggunakan HTTPS dan tambahkan parameter cache busting
                let secureURL = downloadURL;
                if (!secureURL.startsWith('https')) {
                    secureURL = secureURL.replace('http:', 'https:');
                }
                const urlWithCacheBuster = `${secureURL}?timestamp=${timestamp}&rand=${Math.random().toString(36).substring(7)}`;
                
                // Hapus pesan loading
                ownerChatMessages.removeChild(loadingMessage);
                
                // Buat ID konsisten untuk pesan
                const messageHash = hashString(downloadURL + timestamp);
                const consistentMsgId = `user_image_${timestamp}_${messageHash}`;
                
                // Tampilkan gambar di chat
                displayUserImageMessage(urlWithCacheBuster);
                
                // Simpan pesan dengan gambar di Firebase
                return database.ref(`chats/${userChatId}/messages/${consistentMsgId}`).set({
                    sender: 'user',
                    name: userName,
                    messageType: 'image',
                    imageURL: downloadURL,
                    message: 'Image',
                    timestamp: timestamp,
                    status: 'waiting'
                })
                .then(() => {
                    console.log("Gambar berhasil disimpan di Firebase");
                    
                    // Update waktu aktivitas terakhir
                    return database.ref(`chats/${userChatId}`).update({
                        last_activity: timestamp
                    });
                })
                .then(() => {
                    console.log("Waktu aktivitas berhasil diupdate");
                })
                .catch(err => {
                    console.error("Error saat menyimpan pesan gambar:", err);
                    alert("Gambar berhasil diupload tetapi gagal menyimpan ke database. Silakan coba lagi.");
                });
            } catch (error) {
                console.error('Error mendapatkan URL download:', error);
                loadingContainer.innerHTML = '<i class="fas fa-exclamation-circle"></i> Gagal mendapatkan URL gambar';
                loadingContainer.style.color = '#ff5757';
                
                // Tampilkan pesan error yang lebih detail
                const errorDetails = document.createElement('div');
                errorDetails.textContent = `Error: ${error.code || ''} - ${error.message}`;
                errorDetails.style.fontSize = '12px';
                errorDetails.style.marginTop = '5px';
                loadingContainer.appendChild(errorDetails);
            }
        }
    );
}

// Tambahkan fungsi hash string
function hashString(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash).toString(16).substring(0, 8);
}

// Fungsi untuk menampilkan pesan gambar dari user
function displayUserImageMessage(imageURL) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'user-message';
    
    const imageContainer = document.createElement('div');
    imageContainer.className = 'image-container';
    
    const image = document.createElement('img');
    image.className = 'message-image';
    image.src = imageURL;
    image.addEventListener('click', () => {
        showImagePreview(imageURL);
    });
    imageContainer.appendChild(image);
    
    messageDiv.appendChild(imageContainer);
    
    const statusDiv = document.createElement('div');
    statusDiv.className = 'message-status waiting-status';
    statusDiv.textContent = 'Menunggu balasan...';
    messageDiv.appendChild(statusDiv);
    
    ownerChatMessages.appendChild(messageDiv);
    ownerChatMessages.scrollTop = ownerChatMessages.scrollHeight;
}

// Fungsi untuk menampilkan pesan gambar dari owner
function displayOwnerImageMessage(imageURL, timestamp, messageId) {
    // Buat ID konsisten untuk pesan jika tidak ada
    messageId = messageId || `owner_${timestamp}_${hashMessage(imageURL)}`;
    
    // Periksa apakah pesan dengan ID ini sudah ada
    const existingMsg = document.querySelector(`.owner-message[data-id="${messageId}"]`);
    if (existingMsg) {
        console.log("Pesan dengan ID ini sudah ditampilkan:", messageId);
        return;
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'owner-message';
    messageDiv.dataset.timestamp = timestamp || Date.now();
    messageDiv.dataset.id = messageId;
    
    const nameDiv = document.createElement('div');
    nameDiv.className = 'owner-message-name';
    nameDiv.textContent = 'Owner Vonix PS';
    messageDiv.appendChild(nameDiv);
    
    const imageContainer = document.createElement('div');
    imageContainer.className = 'image-container';
    
    const image = document.createElement('img');
    image.className = 'message-image';
    image.src = imageURL;
    image.addEventListener('click', () => {
        showImagePreview(imageURL);
    });
    imageContainer.appendChild(image);
    
    messageDiv.appendChild(imageContainer);
    
    ownerChatMessages.appendChild(messageDiv);
    ownerChatMessages.scrollTop = ownerChatMessages.scrollHeight;
}

// Fungsi untuk menampilkan preview gambar
function showImagePreview(imageURL) {
    previewImage.src = imageURL;
    imagePreviewModal.classList.add('active');
}

// Tutup preview gambar
closeImagePreview.addEventListener('click', () => {
    imagePreviewModal.classList.remove('active');
});

// Klik di luar gambar juga akan menutup preview
imagePreviewModal.addEventListener('click', (e) => {
    if (e.target === imagePreviewModal) {
        imagePreviewModal.classList.remove('active');
    }
});
